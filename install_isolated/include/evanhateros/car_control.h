// Generated by gencpp from file evanhateros/car_control.msg
// DO NOT EDIT!


#ifndef EVANHATEROS_MESSAGE_CAR_CONTROL_H
#define EVANHATEROS_MESSAGE_CAR_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace evanhateros
{
template <class ContainerAllocator>
struct car_control_
{
  typedef car_control_<ContainerAllocator> Type;

  car_control_()
    : id(0)
    , shutdown(false)
    , velocity(0.0)
    , rotation(0.0)  {
    }
  car_control_(const ContainerAllocator& _alloc)
    : id(0)
    , shutdown(false)
    , velocity(0.0)
    , rotation(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _shutdown_type;
  _shutdown_type shutdown;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _rotation_type;
  _rotation_type rotation;





  typedef boost::shared_ptr< ::evanhateros::car_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::evanhateros::car_control_<ContainerAllocator> const> ConstPtr;

}; // struct car_control_

typedef ::evanhateros::car_control_<std::allocator<void> > car_control;

typedef boost::shared_ptr< ::evanhateros::car_control > car_controlPtr;
typedef boost::shared_ptr< ::evanhateros::car_control const> car_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::evanhateros::car_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::evanhateros::car_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::evanhateros::car_control_<ContainerAllocator1> & lhs, const ::evanhateros::car_control_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.shutdown == rhs.shutdown &&
    lhs.velocity == rhs.velocity &&
    lhs.rotation == rhs.rotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::evanhateros::car_control_<ContainerAllocator1> & lhs, const ::evanhateros::car_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace evanhateros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::evanhateros::car_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::evanhateros::car_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::evanhateros::car_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::evanhateros::car_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::evanhateros::car_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::evanhateros::car_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::evanhateros::car_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d2cc03a4196a5dac5509c8ff21f0969";
  }

  static const char* value(const ::evanhateros::car_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d2cc03a4196a5daULL;
  static const uint64_t static_value2 = 0xc5509c8ff21f0969ULL;
};

template<class ContainerAllocator>
struct DataType< ::evanhateros::car_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "evanhateros/car_control";
  }

  static const char* value(const ::evanhateros::car_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::evanhateros::car_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"bool shutdown\n"
"float32 velocity\n"
"float32 rotation\n"
;
  }

  static const char* value(const ::evanhateros::car_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::evanhateros::car_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.shutdown);
      stream.next(m.velocity);
      stream.next(m.rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct car_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::evanhateros::car_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::evanhateros::car_control_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "shutdown: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shutdown);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "rotation: ";
    Printer<float>::stream(s, indent + "  ", v.rotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EVANHATEROS_MESSAGE_CAR_CONTROL_H
